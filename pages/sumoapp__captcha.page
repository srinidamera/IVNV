<apex:page showHeader="false"
           sidebar="false">
    <html>

    <head>
        <script type="text/javascript">
            var verifyCallback = function(response) {
                parent.postMessage({ event: 'verified', detail: response }, '{!$Site.BaseSecureUrl}');
            };

            var observer = new MutationObserver(function(mutations) {
                const body = document.getElementById('body');
                if (body && body.children) {
                    const additionalCheckSection = Array.from(body.children).find(f => f.tagName === 'DIV');
                    const captcha = document.getElementById("captcha");
                    const isCaptchaRequiredAdditionalCheck = additionalCheckSection && additionalCheckSection.style && additionalCheckSection.style.visibility === 'visible';
                    parent.postMessage({ event: 'expand', detail: isCaptchaRequiredAdditionalCheck }, '{!$Site.BaseSecureUrl}');
                    captcha.style.display = isCaptchaRequiredAdditionalCheck ? "none" : "block";

                    if (isCaptchaRequiredAdditionalCheck) {
                        // this div is generated by recaptcha lib and height is autoset to 78px - the height of iframe inside c-captha
                        // here we make it higher explicitly to fit captcha content. Value is taken from c-captcha POPUP_STYLES.
                        additionalCheckSection.lastChild.style.height = '495px';
                    }
                }
            });

            window.addEventListener('message', function(e) {
                var url = e.origin;
                const eventData = parseEventData(e.data)
                if (eventData.event === 'captchaframeloaded' && validateOrigin(url)) {
                    // SFDC Security Review: The false positive case. These parameters (sitekey, callback, expired-callback) are used to configure the reCAPTCHA v2 widget.
                    grecaptcha.render('captcha', {
                        'sitekey': eventData.clientSecretKey,
                        'callback': verifyCallback,
                        'expired-callback': verifyCallback
                    });

                    observer.observe(document.body, { subtree: true, childList: true, attributes: true });
                }
            });
        </script>
        <script src="{!URLFOR($Resource.libs, 'iframes/iframeOriginValidation.js')}"></script>
    </head>

    <body id="body">
        <form action="?"
              method="POST">
            <div id="captcha"></div>
            <br/>
            <input type="submit"
                   value="Submit"
                   style="display:none" />
        </form>
        <script src="https://www.google.com/recaptcha/api.js?render=explicit"
                async=""
                defer="">
                </script>
    </body>

    </html>
</apex:page>